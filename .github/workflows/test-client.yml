name: test

on:
  push:
      branches:
        - develop
      paths:
        - 'packages/client/**'
        - '.github/workflows/test-client.yml'

jobs:
  setup:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}

      - name: install
        run: yarn --check-files --frozen-lockfile --non-interactive --ignore-engines

      - name: cache workspace
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

  lint:
    needs: setup
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: lint by ESlint
        run: yarn workspace client lint

      - name: lint by VTC
        run: yarn workspace client lint:template

      - name: lint by Stylelint
        run: yarn workspace client lint:css

  audit:
    needs: setup
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: audit
        run: yarn workspace client run audit

  test-unit:
    needs: setup
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: pre-setup
        run: sed -i -e '2s/^/\/\/ /g' packages/client/src/types/vue-shims.d.ts

      - name: test unit
        run: yarn workspace client test:unit --ci

      # - name: upload coverage
      #   if: matrix.node == 14
      #   uses: codecov/codecov-action@master
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage/clover.xml

  test-snapshot:
    needs: setup
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: pre-setup
        run: sed -i -e '2s/^/\/\/ /g' packages/client/src/types/vue-shims.d.ts

      - name: test snapshot
        run: yarn workspace client test:snapshot --ci

  # test-visual:
  #   needs: setup
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       node: [13]

  #   steps:
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: checkout
  #       uses: actions/checkout@master

  #     - name: restore workspace cache
  #       uses: actions/cache@v1
  #       with:
  #         path: ${{ github.workspace }}
  #         key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

  #     - name: pre-setup
  #       run: sed -i -e '2s/^/\/\/ /g' packages/client/src/types/vue-shims.d.ts

  #     - name: build
  #       run: yarn workspace client build-storybook

  #     - name: deploy
  #       env:
  #         PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  #       run: yarn workspace client percy-storybook --debug

      # - name: Percy Test
      #   uses: percy/storybook-action@master
      #   with:
      #     working-directory: packages/client
      #   env:
      #     PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v2


  deploy-storybook:
    needs: [lint, audit, test-unit, test-snapshot]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: pre-setup
        run: sed -i -e '2s/^/\/\/ /g' packages/client/src/types/vue-shims.d.ts

      # - name: deploy storybook
      #   run: yarn workspace client deploy-storybook -- --ci
      #   env:
      #     GH_TOKEN: ${ GITHUB_ACTOR }:${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [lint, audit, test-unit, test-snapshot]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [10]

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: checkout
        uses: actions/checkout@master

      - name: restore workspace cache
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-nuxt-${{ github.sha }}

      - name: create secret json
        uses: schdck/create-env-json@master
        with:
          file-name: 'packages/client/secret.json'
          type: service_account
          project_id: ${{ secrets.PROJECT_ID_DEV }}
          private_key_id: ${{ secrets.PRIVATE_KEY_ID_DEV }}
          private_key: ${{ secrets.PRIVATE_KEY_DEV }}
          client_email: ${{ secrets.CLIENT_EMAIL_DEV }}
          client_id: ${{ secrets.CLIENT_ID_DEV }}
          auth_uri: https://accounts.google.com/o/oauth2/auth
          token_uri: https://oauth2.googleapis.com/token
          auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
          client_x509_cert_url: ${{ secrets.CLIENT_X509_CERT_URL_DEV }}

      - name: build
        env:
          API_KEY: ${{ secrets.API_KEY_DEV }}
          AUTH_DOMAIN: ${{ secrets.AUTH_DOMAIN_DEV }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
          PROJECT_ID: ${{ secrets.PROJECT_ID_DEV }}
          STORAGE_BUCKET: ${{ secrets.STORAGE_BUCKET_DEV }}
          MESSAGING_SENDER_ID: ${{ secrets.MESSAGING_SENDER_ID_DEV }}
          APP_ID: ${{ secrets.APP_ID_DEV }}
          MEASUREMENT_ID: ${{ secrets.MEASUREMENT_ID_DEV }}
          DSN_DEV: ${{ secrets.DSN_DEV }}
        run: yarn workspace client build

      - name: prepare-deploy
        run: yarn workspace client build:copy

      - name: deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only functions:ssr,hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN_DEV }}
          PROJECT_PATH: ./packages/client

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: checkout
        uses: actions/checkout@master

      - run: mkdir /tmp/artifacts

      - name: run Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          author: ${{ github.actor }}
          branch: ${{ github.ref }}
          outputDirectory: /tmp/artifacts
          urls: 'https://roomy-devlop.web.app/,https://roomy-devlop.web.app/public,https://roomy-devlop.web.app/login'
          sha: ${{ github.sha }}
          slackWebhookUrl: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}

      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: /tmp/artifacts
      #     keep_files: true
      #     publish_branch: develop

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: Lighthouse reports
          path: /tmp/artifacts

  notice:
    needs: lighthouse
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_DEV }} # required
        if: always() # Pick up events even if the job fails or is canceled.
