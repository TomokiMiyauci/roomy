rules_version = '2'

service cloud.firestore {
  function isValidProfiles(profile) {
    return profile.size() == 2 &&
    'displayName' in profile &&
    profile.displayName is string &&
    'photoURL' in profile &&
    profile.photoURL is string
  }

  function isValidPublicRooms(publicRoom) {
    return publicRoom.size() == 6 &&
    'name' in publicRoom &&
    publicRoom.name is string &&
    'photoURL' in publicRoom &&
    publicRoom.photoURL is string &&
    'messageCount' in publicRoom &&
    publicRoom.messageCount is number &&
    'recent' in publicRoom &&
    publicRoom.recent is map &&
    'createdAt' in publicRoom &&
    publicRoom.createdAt is timestamp &&
    'updatedAt' in publicRoom &&
    publicRoom.updatedAt is timestamp &&
    isValidRecent(publicRoom.recent)
  }

  function isValidRecent(recent) {
    return recent.size() == 4 &&
    'kind' in recent &&
    recent.kind.matches('TEXT|IMAGE|AUDIO') &&
    'shortMessage' in recent &&
    recent.shortMessage is string &&
    'author' in recent &&
    recent.author is map &&
    'updatedAt' in recent &&
    recent.updatedAt is timestamp &&
    isValidAnonymous(recent.author) || isValidAuthor(recent.author)
  }

  function isValidAnonymous(anonymous) {
    return anonymous.size() == 1 &&
    'isAnonymous' in anonymous &&
    anonymous.isAnonymous == true
  }

  function isValidAuthor(author) {
    return author.size() == 3 &&
    'isAnonymous' in author &&
    author.isAnonymous == false &&
    'displayName' in author &&
    author.displayName is string &&
    'photoURL' in author &&
    author.photoURL is string
  }

  function isValidMessages(message) {
    return (message.size() == 5 || message.size() == 6) &&
    isValidMessageText(message) ||
    isValidMessageImage(message) ||
    isValidMessageAudio(message) &&
    'createdAt' in message &&
    'updatedAt' in message &&
    'author' in message &&
    message.createdAt is timestamp &&
    message.updatedAt is timestamp &&
    isValidAnonymous(message.author) || isValidAuthor(message.author)
  }

  function isAuthorized() {
    return request.auth != null
  }

  function isValidMessageText(message) {
    return
    'kind' in message &&
    'text' in message &&
    message.kind == 'TEXT' &&
    message.text is string
  }

  function isValidMessageImage(message) {
    return isAuthorized() &&
    'kind' in message &&
    'imageURL' in message &&
    'size' in message &&
    message.kind == 'IMAGE' &&
    message.imageURL is string &&
    message.size is number
  }

  function isValidMessageAudio(message) {
    return isAuthorized() &&
    'kind' in message &&
    'audioURL' in message &&
    'size' in message &&
    message.kind == 'AUDIO' &&
    message.audioURL is string &&
    message.size is number
  }

  match /databases/{database}/documents {
    // function profile(uid) {
    //   return /databases/$(database)/documents/profile/$(uid)
    // }

    // function publicRoom(uid) {
    //   return /databases/$(database)/documents/public-rooms/$(uid)
    // }

    match /public-rooms/{uid} {
      allow list;

      allow create: if request.auth != null &&
      isValidPublicRooms(request.resource.data) &&
      request.resource.data.messageCount == 0 &&
      request.resource.data.recent.kind == 'TEXT' &&
      request.resource.data.recent.shortMessage == 'No message' &&
      request.resource.data.recent.author.isAnonymous == false &&
      request.auth.token.name == request.resource.data.recent.author.displayName &&
      request.resource.data.createdAt == request.time &&
      request.resource.data.updatedAt == request.time &&
      request.resource.data.recent.updatedAt == request.time

      match /messages/{message} {
        allow read;

        allow create: if isValidMessages(request.resource.data)
      }
    }

    match /profiles/{uid} {
      allow read, update;

      allow create: if isAuthorized() &&
      isValidProfiles(request.resource.data) &&
      request.auth.token.name == request.resource.data.displayName &&
      request.auth.uid == uid;
    }

    match /rooms/{uid} {
      allow read, create;
    }

    match /rooms/{uid}/messages/{id} {
      allow read, create;
    }
  }
}
// service cloud.firestore {
//   match /databases/{database}/documents {
//     match /{document=**} {
//       allow read, write;
//     }
//   }
// }
